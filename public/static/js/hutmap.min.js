(function(){angular.module("google-maps",[]).constant("googleMapsConfigDefaults",{maps:{"default":{zoom:8,center:new google.maps.LatLng(46.87916,-120),mapTypeId:google.maps.MapTypeId.ROADMAP}},markerTypes:{"default":{}},selectedMarker:{},getLatLng:function(object){var latLng={lat:0,lng:0};if(object){latLng.lat=object.lat;latLng.lng=object.lng}}}).value("googleMapsConfig",{})})();(function(){angular.module("hutmap",["google-maps"]).config(["$routeProvider",function($routeProvider){}])})();(function(){angular.module("hutmap.services",[])})();(function(){angular.module("hutmap").controller("MapCtrl",["$scope","$timeout",function($scope,$timeout){$scope.selectedMarker;$scope.log=function(){console.log($scope)};$scope.setAnimation=function(marker,animate){if(animate&&marker.getAnimation()==null)marker.setAnimation(google.maps.Animation.BOUNCE);else if(!animate)$timeout(function(){marker.setAnimation(null)})};$scope.addMarker=function($event){$scope.markers.push(new google.maps.Marker({map:$scope.gmap,position:$event.latLng}))};$scope.setZoomMessage=
function(zoom){$scope.zoomMessage="You just zoomed to "+zoom+"!"};$scope.openMarkerInfo=function(marker){$scope.currentMarker=marker;$scope.currentMarkerLat=marker.getPosition().lat();$scope.currentMarkerLng=marker.getPosition().lng();$scope.infoWindow.open($scope.gmap,marker)};$scope.setMarkerPosition=function(marker,lat,lng){marker.setPosition(new google.maps.LatLng(lat,lng))}}])})();(function(){angular.module("hutmap").value("version","0.1").constant("hutmapMapId","map_canvas").value("googleMapsConfig",{maps:{"map_canvas":{zoom:8,center:new google.maps.LatLng(46.87916,-120),mapTypeId:google.maps.MapTypeId.TERRAIN}},markerTypes:{"hut":{},"filtered-hut":{}},selectedMarker:{},getLatLng:function(hut){}}).run(["hutmapMapId","googleMapsContainer",function(hutmapMapId,googleMapsContainer){var gmapPromise=googleMapsContainer.getMapPromise(hutmapMapId);gmapPromise.then(function(gmap){var getTile=
{};getTile.MSR_TOPO=function(point,zoom){var projection=gmap.getProjection();var h=Math.pow(2,zoom);var swPnt=new google.maps.Point(point.x*256/h,(point.y+1)*256/h);var nePnt=new google.maps.Point((point.x+1)*256/h,point.y*256/h);var sw=projection.fromPointToLatLng(swPnt);var ne=projection.fromPointToLatLng(nePnt);var bbox=[sw.lng(),sw.lat(),ne.lng(),ne.lat()];var url="http://msrmaps.com/ogcmap.ashx?version=1.1.1&request=GetMap&Layers=drg&Styles=default&SRS=EPSG:4326&BBOX="+bbox.join(",")+"&width=256&height=256&format=image/jpeg";
return url};getTile.ARC_GIS_USA=function(point,zoom){var c=1<<zoom,column=point.x%c;if(column<0)column+=c;var url="http://services.arcgisonline.com/ArcGIS/rest/services/USA_Topo_Maps/MapServer/tile/";return url+parseInt(zoom)+"/"+point.y+"/"+column};getTile.ARC_GIS_WORLD=function(point,zoom){var c=1<<zoom,column=point.x%c;if(column<0)column+=c;var url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/";return url+parseInt(zoom)+"/"+point.y+"/"+column};var mapTypes=
{MSR_TOPO:new google.maps.ImageMapType({name:"MSR-USGS",alt:"USGS topos from Microsoft Research",minZoom:1,maxZoom:20,tileSize:new google.maps.Size(256,256),isPng:false,getTileUrl:getTile.MSR_TOPO}),ARC_GIS_USA:new google.maps.ImageMapType({name:"ArcGisUSA",alt:"ArcGis USA Topos",minZoom:1,maxZoom:15,tileSize:new google.maps.Size(256,256),isPng:true,getTileUrl:getTile.ARC_GIS_USA}),ARC_GIS_WORLD:new google.maps.ImageMapType({name:"ArcGisWorld",alt:"ArcGis World Topos",minZoom:1,maxZoom:15,tileSize:new google.maps.Size(256,
256),isPng:true,getTileUrl:getTile.ARC_GIS_WORLD})};angular.forEach(mapTypes,function(mapType,key){gmap.mapTypes.set(mapType.name,mapType)});gmap.setOptions({mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,google.maps.MapTypeId.SATELLITE,google.maps.MapTypeId.HYBRID,google.maps.MapTypeId.TERRAIN,mapTypes.MSR_TOPO.name,mapTypes.ARC_GIS_USA.name,mapTypes.ARC_GIS_WORLD.name]}})})}])})();(function(){var app=angular.module("hutmap.filters",[]);app.filter("interpolate",["version",function(version){return function(text){return String(text).replace(/\%VERSION\%/mg,version)}}])})();(function(){angular.module("hutmap.directives",[]).directive("hmMap",["$parse","hutmapConfig","googleMaps",function($parse,hutmapConfig,googleMaps){function bindMapEvents(scope,eventsStr,googleObject,element){angular.forEach(eventsStr.split(" "),function(eventName){var $event={type:"map-"+eventName};google.maps.event.addListener(googleObject,eventName,function(evt){element.triggerHandler(angular.extend({},$event,evt));if(!scope.$$phase)scope.$apply()})})}var counter=0;function getCount(){return counter++}
function getMapId(elm){var id=elm.attr("id")||elm.data("id");if(!id){id=getCount();elm.data("id",count)}return id}var mapEvents="bounds_changed center_changed click dblclick drag dragend "+"dragstart heading_changed idle maptypeid_changed mousemove mouseout "+"mouseover projection_changed resize rightclick tilesloaded tilt_changed "+"zoom_changed";var mapOptions=hutmapConfig.map||{};return{restrict:"A",link:function(scope,elm,attrs){var id=getMapId(elm);var map=googleMaps.getMap(id);if(!map)map=googleMaps.addMap(id,
elm[0],mapOptions);var model=$parse(attrs.hmMap);model.assign(scope,map);bindMapEvents(scope,mapEvents,map,elm)}}}])})();(function(){angular.module("google-maps").directive("googleMap",["$timeout","googleMapsUtils","googleMapsConfig","googleMapsConfigDefaults","googleMapsContainer",function($timeout,googleMapsUtils,googleMapsConfig,googleMapsConfigDefaults,googleMapsContainer){var getMapId=googleMapsUtils.getMapId;var latLngEqual=googleMapsUtils.latLngEqual;var latLngToObj=googleMapsUtils.latLngToObj;var isLatLngNullOrNaN=googleMapsUtils.isLatLngNullOrNaN;var gMConfig=googleMapsConfig;var gMCDefaults=googleMapsConfigDefaults;
var gMContainer=googleMapsContainer;var MapController=function($scope,$element,$attrs){this._id=getMapId($element);var config=this._getConfig(this._id,$scope,gMConfig,gMCDefaults);this.markers={};this.dragging=false;Object.defineProperty(this,"center",{get:function(){return this._map.getCenter()},set:function(center){if(!isLatLngNullOrNaN(center))throw"center contains null or NaN";var changed=!latLngEqual(this.center,center);if(changed)this._map.setCenter(center)}});Object.defineProperty(this,"zoom",
{get:function(){return this._map.getZoom()},set:function(zoom){if(!(zoom!=null&&!isNaN(zoom)))throw"zoom was null or NaN";var changed=this.zoom!==zoom;if(changed)this._map.setZoom(self.zoom)}});Object.defineProperty(this,"bounds",{get:function(){return this._map.getBounds()},set:function(bounds){var swEq=latLngEqual(this.bounds.getSouthWest(),bounds.getSouthWest());var neEq=latLngEqual(this.bounds.getNorthEast(),bounds.getNorthEast());var numbers=!isLatLngNullOrNaN(bounds.getSouthWest())&&!isLatLngNullOrNaN(bounds.getNorthEast());
if(!numbers)throw"bounds contains null or NaN";var changed=!(swEq&&neEq);if(changed)this._map.fitBounds(bounds)}});this._initDragListeners()};MapController.precision=3;MapController.prototype._getConfig=function(id,$scope,gMConfig,gMCDefaults){var finalConfig={};if(id in gMConfig.maps)finalConfig=gMConfig.maps[id];else finalConfig=gMCDefaults.maps["default"];var extraConfig={};if(angular.isDefined($scope.center)&&angular.isDefined($scope.center.lat)&&angular.isDefined($scope.center.lng))extraConfig.center=
new google.maps.LatLng($scope.center.lat,$scope.center.lng);if(angular.isDefined($scope.zoom))extraConfig.zoom=$scope.zoom;angular.extend(finalConfig,extraConfig);return finalConfig};MapController.prototype._createMap=function(id,element,config,gMContainer){var map=gMContainer.getMap(id);if(!map)map=gMContainer.addMap(id,element[0],config);else throw"A map with id "+id+" already exists. You must use"+"different ids for each instance of the googleMap directive.";return map};MapController.prototype._initDragListeners=
function(){var self=this;this.addListener("dragstart",function(){self.dragging=true});this.addListener("idle",function(){self.dragging=false});this.addListener("drag",function(){self.dragging=true})};MapController.prototype.addListener=function(event,handler){google.maps.event.addListener(this._map,event,handler)};MapController.prototype.addListenerOnce=function(event,handler){google.maps.event.addListenerOnce(this._map,event,handler)};MapController.prototype.addMarker=function(marker){if(!(marker instanceof
google.maps.Marker))throw"marker was null";var position=marker.getPosition();if(this.hasMarker(position))return false;var hash=position.toUrlValue(MapController.precision);this.markers[hash]=marker;marker.setMap(this._map);console.log(hash);console.log(this.markers);return true};MapController.prototype.hasMarker=function(latLng){return this.getMarker(latLng)instanceof google.maps.Marker};MapController.prototype.getMarker=function(latLng){if(!(latLng instanceof google.maps.LatLng))throw"latLng was null";
var hash=latLng.toUrlValue(MapController.precision);console.log(hash);if(hash in this.markers)return this.markers[hash];else return null};MapController.prototype.removeMarker=function(latLng){if(!(latLng instanceof google.maps.LatLng))throw"latLng was null";var removed=false;var hash=latLng.toUrlValue(MapController.precision);var marker=this.markers[hash];if(marker){marker.setMap(null);removed=true}this.markers[hash]=null;return removed};MapController.prototype.fitToMarkers=function(){var bounds=
new google.maps.LatLngBounds;angular.forEach(this.markers,function(m,i){bounds.extend(m.getPosition())});this._map.fitBounds(bounds)};function link(scope,element,attrs,controller){if(!angular.isDefined(scope.center))scope.center={};if(!angular.isDefined(scope.bounds))scope.bounds={};var hasCenter=false;var hasZoom=false;var hasBounds=false;if(attrs.hasOwnProperty("center"))hasCenter=true;if(attrs.hasOwnProperty("zoom"))hasZoom=true;if(attrs.hasOwnProperty("bounds"))hasBounds=true;var updateScope=
function(){$timeout(function(){if(hasCenter||hasZoom||hasBounds)scope.$apply(function(s){if(hasCenter)scope.center=latLngToObj(controller.center);if(hasZoom)scope.zoom=controller.zoom;if(hasBounds){var b=controller.bounds;if(b)scope.bounds={southWest:latLngToObj(b.getSouthWest()),northEast:latLngToObj(b.getNorthEast())}}})})};controller.addListener("drag",updateScope);controller.addListener("zoom_changed",updateScope);controller.addListener("center_changed",updateScope);controller.addListenerOnce("bounds_changed",
updateScope);if(hasCenter)scope.$watch("center",function(newValue,oldValue){var ok=newValue!=null&&!isNaN(newValue);var changed=newValue!==oldValue;if(ok&&changed&&!controller.dragging)controller.center=new google.maps.LatLng(newValue.lat,newValue.lng)},true);if(hasZoom)scope.$watch("zoom",function(newValue,oldValue){var ok=newValue!=null&&!isNaN(newValue);if(ok&&newValue!==oldValue)controller.zoom=newValue});if(hasBounds)scope.$watch("bounds",function(newValue,oldValue){var ok=newValue!=null&&!isNaN(newValue);
var changed=newValue!==oldValue;if(ok&&changed&&!controller.dragging)controller.bounds=new google.maps.LatLngBounds(new google.maps.LatLng(newValue.southWest),new google.maps.LatLng(newValue.northEast))})}return{restrict:"AE",priority:100,template:"<div>"+'<div id="{{mapId}}" style="width:100%;height:100%;"></div>'+"<div ng-transclude></div>"+"</div>",transclude:true,replace:true,scope:{mapId:"@",center:"=",zoom:"=",bounds:"="},controller:MapController,link:link}}])})();(function(){angular.module("google-maps").directive("googleMapMarkers",["$timeout","$parse",function($timeout,$parse){function link(scope,element,attrs,controller){var hasOnMarkerSelected=false;if(attrs.hasOwnProperty("onMarkerSelected"))hasOnMarkerSelected=true;var marker=new google.maps.Marker({position:new google.maps.LatLng(46.87916,-120)});controller.addMarker(marker);marker=new google.maps.Marker({position:new google.maps.LatLng(60,-122)});controller.addMarker(marker);if(hasOnMarkerSelected){var onMarkerSelected=
$parse(attrs.onMarkerSelected);angular.forEach(controller.markers,function(marker,i){google.maps.event.addListener(marker,"click",function(){$timeout(function(){var locals={"$marker":marker};onMarkerSelected(scope.$parent,locals)})})})}}return{restrict:"AE",priority:100,scope:false,require:"^googleMap",link:link}}])})();(function(){angular.module("google-maps").factory("googleMapsUtils",[function(){var counter=0;function getCount(){return counter++}function getMapId(elm){var id=elm.attr("id")||elm.data("id");if(!id){id=getCount();elm.data("id",id)}return id}function floatEqual(f1,f2){return Math.abs(f1-f2)<1E-6}function latLngEqual(l1,l2){if(l1==null||l2==null)return false;return floatEqual(l1.lat(),l2.lat())&&floatEqual(l1.lng(),l2.lng())}function latLngToObj(latLng){return{lat:latLng.lat(),lng:latLng.lng()}}function isLatLngNullOrNaN(latLng){if(latLng==
null)return false;var isNull=latLng.lat()==null||latLng.lng()==null;var isNotaN=isNaN(latLng.lat())||isNaN(latLng.lng());return isNull||isNotaN}return{getMapId:getMapId,latLngEqual:latLngEqual,latLngToObj:latLngToObj,isLatLngNullOrNaN:isLatLngNullOrNaN}}])})();(function(){angular.module("google-maps").factory("googleMapsContainer",["$q",function($q){var maps={};var defers={};function addMap(mapId,mapDiv,mapOptions){if(mapId in maps)return getMap(mapId);var map=new google.maps.Map(mapDiv,mapOptions);maps[mapId]=map;if(mapId in defers)defers[mapId].resolve(map);return map}function getMap(mapId){return maps[mapId]}function getMapPromise(mapId){var defer=defers[mapId]||$q.defer();defers[mapId]=defer;return defer.promise}return{addMap:addMap,getMap:getMap,getMapPromise:getMapPromise}}])})();

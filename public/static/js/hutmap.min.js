'use strict';(function(){angular.module("hutmap",["hutmapServices","hutmapFilters","google-maps","ngResource","$strap.directives"]).config(["$routeProvider",function($routeProvider){}])})();(function(){angular.module("google-maps",[]).value("googleMapsDefaults",{"mapOptions":{zoom:8,center:new google.maps.LatLng(46.87916,-120),mapTypeId:google.maps.MapTypeId.ROADMAP}})})();(function(){angular.module("google-maps").directive("googleMap",["$timeout","googleMapsUtils","googleMapControllerFactory",function($timeout,googleMapsUtils,googleMapControllerFactory){var objToLatLng=googleMapsUtils.objToLatLng;var objToBounds=googleMapsUtils.objToBounds;var latLngToObj=googleMapsUtils.latLngToObj;var boundsToObj=googleMapsUtils.boundsToObj;function link(scope,element,attrs,controller){if(!angular.isDefined(scope.center))scope.center={};if(!angular.isDefined(scope.bounds))scope.bounds=
{};if(!attrs.hasOwnProperty("mapId"))throw"googleMap must have non-empty mapId attribute";var hasCenter=false;var hasZoom=false;var hasBounds=false;if(attrs.hasOwnProperty("center"))hasCenter=true;if(attrs.hasOwnProperty("zoom"))hasZoom=true;if(attrs.hasOwnProperty("bounds"))hasBounds=true;var updateScope=function(){$timeout(function(){if(hasCenter||hasZoom||hasBounds)scope.$apply(function(s){if(hasCenter)scope.center=latLngToObj(controller.center);if(hasZoom)scope.zoom=controller.zoom;if(hasBounds){var b=
controller.bounds;if(b)scope.bounds=boundsToObj(b)}})})};controller.addMapListener("drag",updateScope);controller.addMapListener("zoom_changed",updateScope);controller.addMapListener("center_changed",updateScope);controller.addMapListener("bounds_changed",updateScope);if(hasCenter)scope.$watch("center",function(newValue,oldValue){var changed=newValue!==oldValue;if(changed&&!controller.dragging){var latLng=objToLatLng(newValue);if(latLng)controller.center=latLng}},true);if(hasZoom)scope.$watch("zoom",
function(newValue,oldValue){var ok=newValue!=null&&!isNaN(newValue);if(ok&&newValue!==oldValue)controller.zoom=newValue});if(hasBounds)scope.$watch("bounds",function(newValue,oldValue){var changed=newValue!==oldValue;if(changed&&!controller.dragging){var bounds=objToBounds(newValue);if(bounds)controller.bounds=bounds}})}return{restrict:"AE",priority:100,template:"<div>"+'<div id="" style="width:100%;height:100%;"></div>'+"<div ng-transclude></div>"+"</div>",transclude:true,replace:true,scope:{center:"=",
zoom:"=",bounds:"=",mapOptions:"&"},controller:googleMapControllerFactory.MapController,link:link}}])})();(function(){angular.module("google-maps").directive("googleMapMarkers",["$log","$parse","$timeout","googleMapsUtils",function($log,$parse,$timeout,googleMapsUtils){var latLngEqual=googleMapsUtils.latLngEqual;var objToLatLng=googleMapsUtils.objToLatLng;function link(scope,element,attrs,controller){if(!("objects"in attrs))throw"objects attribute required";else if(!("getLatLng"in attrs))throw"getLatLng attribute required";var handlers={};angular.forEach(attrs,function(value,key){if(key.lastIndexOf("on",
0)===0){var event=angular.lowercase(key.substring(2));var fn=$parse(value);handlers[event]=fn}});var updateMarkers=function(objects){var markerOptions=scope.markerOptions();var objectHash={};angular.forEach(objects,function(object,i){var latLngObj=scope.getLatLng({object:object});var position=objToLatLng(latLngObj);if(position==null)return;var hash=position.toUrlValue(controller.precision);objectHash[hash]=object;if(!controller.hasMarker(latLngObj.lat,latLngObj.lng)){var options={};angular.extend(options,
markerOptions,{position:position});controller.addMarker(options);var marker=controller.getMarker(latLngObj.lat,latLngObj.lng);angular.forEach(handlers,function(handler,event){controller.addListener(marker,event,function(){$timeout(function(){handler(scope.$parent.$parent,{object:object,marker:marker})})})})}});var orphaned=[];controller.forEachMarker(function(marker){var markerPosition=marker.getPosition();var hash=markerPosition.toUrlValue(controller.precision);if(!(hash in objectHash))orphaned.push(marker)});
angular.forEach(orphaned,function(marker,i){var position=marker.getPosition();controller.removeMarker(position.lat(),position.lng())})};scope.$watch("objects().length",function(newValue,oldValue){if(newValue!=null&&newValue!==oldValue)updateMarkers(scope.objects())});$timeout(angular.bind(this,updateMarkers,scope.objects()))}return{restrict:"AE",priority:100,scope:{objects:"&",getLatLng:"&",markerOptions:"&"},require:"^googleMap",link:link}}])})();(function(){angular.module("google-maps").factory("googleMapControllerFactory",["googleMapsUtils","googleMapsDefaults","googleMapsContainer",function(googleMapsUtils,googleMapsDefaults,googleMapsContainer){var latLngEqual=googleMapsUtils.latLngEqual;var boundsEqual=googleMapsUtils.boundsEqual;var latLngToObj=googleMapsUtils.latLngToObj;var hasNaN=googleMapsUtils.hasNaN;var gMDefaults=googleMapsDefaults;var gMContainer=googleMapsContainer;var MapController=function($scope,$element,$attrs){var mapId=
$attrs.mapId;if(!mapId)throw"googleMap must have non-empty mapId attribute";var mapDiv=$element.find("[id]");mapDiv.attr("id",mapId);var config=this._getConfig($scope,gMDefaults);this._map=this._createMap(mapId,mapDiv,config,gMContainer);this._markers={};this.dragging=false;Object.defineProperties(this,{"precision":{value:MapController.precision,writeable:false},"center":{configurable:true,get:function(){return this._map.getCenter()},set:function(center){if(hasNaN(center))throw"center contains null or NaN";
var changed=!latLngEqual(this.center,center);if(changed)this._map.panTo(center)}},"zoom":{configurable:true,get:function(){return this._map.getZoom()},set:function(zoom){if(!(zoom!=null&&!isNaN(zoom)))throw"zoom was null or NaN";var changed=this.zoom!==zoom;if(changed)this._map.setZoom(zoom)}},"bounds":{configurable:true,get:function(){return this._map.getBounds()},set:function(bounds){var numbers=!hasNaN(bounds.getSouthWest())&&!hasNaN(bounds.getNorthEast());if(!numbers)throw"bounds contains null or NaN";
var changed=!boundsEqual(this.bounds,bounds);if(changed)this._map.fitBounds(bounds)}}});this._initDragListeners()};MapController.precision=3;MapController.prototype._getConfig=function($scope,gMDefaults){var defaults=gMDefaults.mapOptions;var config={};angular.extend(config,defaults,$scope.mapOptions());return config};MapController.prototype._createMap=function(id,element,config,gMContainer){var map=gMContainer.getMap(id);if(!map){map=new google.maps.Map(element[0],config);gMContainer.addMap(id,map)}else throw"A map with id "+
id+" already exists. You must use"+" different ids for each instance of the googleMap directive.";return map};MapController.prototype._initDragListeners=function(){var self=this;this.addMapListener("dragstart",function(){self.dragging=true});this.addMapListener("idle",function(){self.dragging=false});this.addMapListener("drag",function(){self.dragging=true})};MapController.prototype.addMapListener=function(event,handler){google.maps.event.addListener(this._map,event,handler)};MapController.prototype.addMapListenerOnce=
function(event,handler){google.maps.event.addListenerOnce(this._map,event,handler)};MapController.prototype.addListener=function(object,event,handler){google.maps.event.addListener(object,event,handler)};MapController.prototype.addListenerOnce=function(object,event,handler){google.maps.event.addListenerOnce(object,event,handler)};MapController.prototype.addMarker=function(markerOptions){var opts={};angular.extend(opts,markerOptions);if(!(opts.position instanceof google.maps.LatLng))throw"markerOptions did not contain a position";
var marker=new google.maps.Marker(opts);var position=marker.getPosition();if(this.hasMarker(position.lat(),position.lng()))return false;var hash=position.toUrlValue(this.precision);this._markers[hash]=marker;marker.setMap(this._map);return true};MapController.prototype.hasMarker=function(lat,lng){return this.getMarker(lat,lng)instanceof google.maps.Marker};MapController.prototype.getMarker=function(lat,lng){if(lat==null||lng==null)throw"lat or lng was null";var latLng=new google.maps.LatLng(lat,lng);
var hash=latLng.toUrlValue(this.precision);if(hash in this._markers)return this._markers[hash];else return null};MapController.prototype.removeMarker=function(lat,lng){if(lat==null||lng==null)throw"lat or lng was null";var latLng=new google.maps.LatLng(lat,lng);var removed=false;var hash=latLng.toUrlValue(this.precision);var marker=this._markers[hash];if(marker){marker.setMap(null);removed=true}this._markers[hash]=null;return removed};MapController.prototype.fitToMarkers=function(){var bounds=new google.maps.LatLngBounds;
this.forEachMarker(function(marker){bounds.extend(marker.getPosition())});this._map.fitBounds(bounds)};MapController.prototype.forEachMarker=function(fn){if(fn==null)throw"fn was null or undefined";angular.forEach(this._markers,function(marker,hash){fn(marker)})};return{MapController:MapController}}])})();(function(){angular.module("google-maps").factory("googleMapsUtils",[function(){function floatEqual(f1,f2){return Math.abs(f1-f2)<1E-6}function latLngEqual(l1,l2){if(!(l1 instanceof google.maps.LatLng&&l2 instanceof google.maps.LatLng))return false;return floatEqual(l1.lat(),l2.lat())&&floatEqual(l1.lng(),l2.lng())}function boundsEqual(b1,b2){if(!(b1 instanceof google.maps.LatLngBounds&&b2 instanceof google.maps.LatLngBounds))return false;var sw1=b1.getSouthWest();var sw2=b2.getSouthWest();var ne1=
b1.getNorthEast();var ne2=b2.getNorthEast();return latLngEqual(sw1,sw2)&&latLngEqual(ne1,ne2)}function latLngToObj(latLng){if(!(latLng instanceof google.maps.LatLng))throw"latLng not a google.maps.LatLng";return{lat:latLng.lat(),lng:latLng.lng()}}function objToLatLng(obj){if(obj!=null){var lat=obj.lat;var lng=obj.lng;var ok=!(lat==null||lng==null)&&!(isNaN(lat)||isNaN(lng));if(ok)return new google.maps.LatLng(lat,lng)}return null}function boundsToObj(bounds){if(!(bounds instanceof google.maps.LatLngBounds))throw"bounds not a google.maps.LatLngBounds";
var sw=bounds.getSouthWest();var ne=bounds.getNorthEast();return{southWest:{lat:sw.lat(),lng:sw.lng()},northEast:{lat:ne.lat(),lng:ne.lng()}}}function objToBounds(obj){if(obj!=null&&obj.southWest&&obj.northEast){var values=[obj.southWest.lat,obj.southWest.lng,obj.northEast.lat,obj.northEast.lng];var ok=true;angular.forEach(values,function(value,i){if(value==null||isNaN(value))ok=false});if(ok)return new google.maps.LatLngBounds(new google.maps.LatLng(values[0],values[1]),new google.maps.LatLng(values[2],
values[3]))}return null}function hasNaN(latLng){if(!(latLng instanceof google.maps.LatLng))throw"latLng must be a google.maps.LatLng";var isNull=latLng.lat()==null||latLng.lng()==null;var isNotaN=isNaN(latLng.lat())||isNaN(latLng.lng());return isNull||isNotaN}return{latLngEqual:latLngEqual,boundsEqual:boundsEqual,latLngToObj:latLngToObj,objToLatLng:objToLatLng,boundsToObj:boundsToObj,objToBounds:objToBounds,hasNaN:hasNaN}}])})();(function(){angular.module("google-maps").factory("googleMapsContainer",["$q",function($q){var maps={};var defers={};function addMap(mapId,map){if(!(map instanceof google.maps.Map))throw"map not a google.maps.Map: "+map;else if(mapId in maps)throw"already contain map with id "+mapId;maps[mapId]=map;if(mapId in defers)defers[mapId].resolve(map)}function getMap(mapId){return maps[mapId]}function getMapPromise(mapId){var defer=defers[mapId]||$q.defer();defers[mapId]=defer;return defer.promise}function removeMap(mapId){if(mapId in
maps)delete maps[mapId];if(mapId in defers)delete defers[mapId]}function clear(){maps={};defers={}}return{addMap:addMap,getMap:getMap,getMapPromise:getMapPromise,removeMap:removeMap,clear:clear}}])})();(function(){angular.module("hutmapServices",[]).factory("Huts",["$resource",function($resource){return $resource("/huts/api/v1/hut",{},{query:{method:"GET",params:{limit:0}}})}])})();(function(){angular.module("hutmap").controller("HutCtrl",["$scope","Huts",function($scope,Huts){$scope.huts;$scope.hutsMeta;var hutQuery=Huts.query({limit:50},function(){$scope.huts=hutQuery.objects;$scope.hutsMeta=hutQuery.meta});$scope.$watch("hutsMeta.total_count",function(newValue,oldValue,scope){if(newValue)console.log(newValue)})}]).controller("MapCtrl",["$scope","mapOptions","markerOptions",function($scope,mapOptions,markerOptions){$scope.mapOptions=mapOptions;$scope.markerOptions=markerOptions;
$scope.selectedHut;$scope.selectHut=function(marker,hut){if($scope.prevSelectedMarker)$scope.prevSelectedMarker.setOptions(markerOptions.huts);$scope.prevSelectedMarker=marker;marker.setOptions(markerOptions.selected);$scope.selectedHut=hut}}]).controller("HutInfoCtrl",["$scope",function($scope){$scope.accuracy_tooltip=["Coordinates provided, but unverifiable.","Wild ass guess.","Slightly better than a wild ass guess.","Found structure on satellite or topo map.","Surveyed with GPS by the Hutmap team.",
"Found on a map and surveyed by the Hutmap team."]}]).controller("NavbarCtrl",["$scope","$window",function($scope,$window){$scope.isPath=function(path){return $window.location.pathname===path}}])})();(function(){angular.module("hutmap").value("version","0.1").constant("hutmapMapId","map_canvas").value("mapOptions",{zoom:3,center:new google.maps.LatLng(46.87916,-120),mapTypeId:google.maps.MapTypeId.ROADMAP}).value("markerOptions",{huts:{icon:"http://maps.gstatic.com/mapfiles/ridefinder-images/mm_20_gray.png",zIndex:0},selected:{icon:"http://maps.google.com/intl/en_us/mapfiles/ms/micons/blue.png",zIndex:1}}).run(["hutmapMapId","googleMapsContainer",function(hutmapMapId,googleMapsContainer){var gmapPromise=
googleMapsContainer.getMapPromise(hutmapMapId);gmapPromise.then(function(gmap){var getTile={};getTile.MSR_TOPO=function(point,zoom){var projection=gmap.getProjection();var h=Math.pow(2,zoom);var swPnt=new google.maps.Point(point.x*256/h,(point.y+1)*256/h);var nePnt=new google.maps.Point((point.x+1)*256/h,point.y*256/h);var sw=projection.fromPointToLatLng(swPnt);var ne=projection.fromPointToLatLng(nePnt);var bbox=[sw.lng(),sw.lat(),ne.lng(),ne.lat()];var url="http://msrmaps.com/ogcmap.ashx?version=1.1.1&request=GetMap&Layers=drg&Styles=default&SRS=EPSG:4326&BBOX="+
bbox.join(",")+"&width=256&height=256&format=image/jpeg";return url};getTile.ARC_GIS_USA=function(point,zoom){var c=1<<zoom,column=point.x%c;if(column<0)column+=c;var url="http://services.arcgisonline.com/ArcGIS/rest/services/USA_Topo_Maps/MapServer/tile/";return url+parseInt(zoom)+"/"+point.y+"/"+column};getTile.ARC_GIS_WORLD=function(point,zoom){var c=1<<zoom,column=point.x%c;if(column<0)column+=c;var url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/";return url+
parseInt(zoom)+"/"+point.y+"/"+column};var mapTypes={MSR_TOPO:new google.maps.ImageMapType({name:"MSR-USGS",alt:"USGS topos from Microsoft Research",minZoom:1,maxZoom:15,tileSize:new google.maps.Size(256,256),isPng:false,getTileUrl:getTile.MSR_TOPO}),ARC_GIS_USA:new google.maps.ImageMapType({name:"ArcGisUSA",alt:"ArcGis USA Topos",minZoom:1,maxZoom:15,tileSize:new google.maps.Size(256,256),isPng:true,getTileUrl:getTile.ARC_GIS_USA}),ARC_GIS_WORLD:new google.maps.ImageMapType({name:"ArcGisWorld",alt:"ArcGis World Topos",
minZoom:1,maxZoom:15,tileSize:new google.maps.Size(256,256),isPng:true,getTileUrl:getTile.ARC_GIS_WORLD})};angular.forEach(mapTypes,function(mapType,key){gmap.mapTypes.set(mapType.name,mapType)});gmap.setOptions({mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,google.maps.MapTypeId.SATELLITE,google.maps.MapTypeId.HYBRID,google.maps.MapTypeId.TERRAIN,mapTypes.MSR_TOPO.name,mapTypes.ARC_GIS_USA.name,mapTypes.ARC_GIS_WORLD.name]}})})}])})();(function(){angular.module("hutmapFilters",[]).filter("truncate",function(){return function(text,length,end){if(isNaN(length))length=10;if(end===undefined)end="...";if(text==null||text.length==0)return null;else if(text.length<=length||text.length-end.length<=length)return text;else return String(text).substring(0,length-end.length)+end}})})();(function(){angular.module("hutmap.directives",[]).directive("hmMap",["$parse","hutmapConfig","googleMaps",function($parse,hutmapConfig,googleMaps){function bindMapEvents(scope,eventsStr,googleObject,element){angular.forEach(eventsStr.split(" "),function(eventName){var $event={type:"map-"+eventName};google.maps.event.addListener(googleObject,eventName,function(evt){element.triggerHandler(angular.extend({},$event,evt));if(!scope.$$phase)scope.$apply()})})}var counter=0;function getCount(){return counter++}
function getMapId(elm){var id=elm.attr("id")||elm.data("id");if(!id){id=getCount();elm.data("id",count)}return id}var mapEvents="bounds_changed center_changed click dblclick drag dragend "+"dragstart heading_changed idle maptypeid_changed mousemove mouseout "+"mouseover projection_changed resize rightclick tilesloaded tilt_changed "+"zoom_changed";var mapOptions=hutmapConfig.map||{};return{restrict:"A",link:function(scope,elm,attrs){var id=getMapId(elm);var map=googleMaps.getMap(id);if(!map)map=googleMaps.addMap(id,
elm[0],mapOptions);var model=$parse(attrs.hmMap);model.assign(scope,map);bindMapEvents(scope,mapEvents,map,elm)}}}])})();

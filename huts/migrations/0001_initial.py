# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.contrib.gis.db.models.fields
import huts.model_fields
import huts.models
import django.core.validators
import any_imagefield.models.fields


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccessType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('identifier', models.SlugField(unique=True, validators=[django.core.validators.RegexValidator(b'^[-a-zA-Z0-9]+$', b'Must contain only letters, numbers, and dashes')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=100)),
                ('created', models.DateField(auto_now_add=True)),
                ('updated', models.DateField(auto_now=True)),
                ('url', models.URLField(max_length=250, blank=True)),
                ('email', models.CharField(max_length=100, blank=True)),
                ('phone', models.CharField(max_length=50, blank=True)),
                ('address', models.TextField(blank=True)),
                ('parent', models.ForeignKey(blank=True, to='huts.Agency', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Designation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('identifier', models.SlugField(unique=True, validators=[django.core.validators.RegexValidator(b'^[-a-zA-Z0-9]+$', b'Must contain only letters, numbers, and dashes')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Hut',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateField(auto_now_add=True)),
                ('updated', models.DateField(auto_now=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('altitude_meters', models.IntegerField(null=True, verbose_name=b'altitude (m)', blank=True)),
                ('location_accuracy', models.IntegerField(blank=True, null=True, choices=[(None, b'Provided by 3rd party'), (1, b'Wild guess (> 1 km)'), (2, b'Guess (< 1 km)'), (3, b'Found on photo or topo map'), (4, b'Surveyed by GPS'), (5, b'Surveyed by GPS and found on map')])),
                ('show_satellite', models.NullBooleanField()),
                ('show_topo', models.NullBooleanField()),
                ('location_references', huts.model_fields.ListField(null=True, blank=True)),
                ('country', huts.model_fields.CountryField(max_length=2, choices=[(b'GB', 'United Kingdom'), (b'AF', 'Afghanistan'), (b'AX', 'Aland Islands'), (b'AL', 'Albania'), (b'DZ', 'Algeria'), (b'AS', 'American Samoa'), (b'AD', 'Andorra'), (b'AO', 'Angola'), (b'AI', 'Anguilla'), (b'AQ', 'Antarctica'), (b'AG', 'Antigua and Barbuda'), (b'AR', 'Argentina'), (b'AM', 'Armenia'), (b'AW', 'Aruba'), (b'AU', 'Australia'), (b'AT', 'Austria'), (b'AZ', 'Azerbaijan'), (b'BS', 'Bahamas'), (b'BH', 'Bahrain'), (b'BD', 'Bangladesh'), (b'BB', 'Barbados'), (b'BY', 'Belarus'), (b'BE', 'Belgium'), (b'BZ', 'Belize'), (b'BJ', 'Benin'), (b'BM', 'Bermuda'), (b'BT', 'Bhutan'), (b'BO', 'Bolivia'), (b'BA', 'Bosnia and Herzegovina'), (b'BW', 'Botswana'), (b'BV', 'Bouvet Island'), (b'BR', 'Brazil'), (b'IO', 'British Indian Ocean Territory'), (b'BN', 'Brunei Darussalam'), (b'BG', 'Bulgaria'), (b'BF', 'Burkina Faso'), (b'BI', 'Burundi'), (b'KH', 'Cambodia'), (b'CM', 'Cameroon'), (b'CA', 'Canada'), (b'CV', 'Cape Verde'), (b'KY', 'Cayman Islands'), (b'CF', 'Central African Republic'), (b'TD', 'Chad'), (b'CL', 'Chile'), (b'CN', 'China'), (b'CX', 'Christmas Island'), (b'CC', 'Cocos (Keeling) Islands'), (b'CO', 'Colombia'), (b'KM', 'Comoros'), (b'CG', 'Congo'), (b'CD', 'Congo, The Democratic Republic of the'), (b'CK', 'Cook Islands'), (b'CR', 'Costa Rica'), (b'CI', "Cote d'Ivoire"), (b'HR', 'Croatia'), (b'CU', 'Cuba'), (b'CY', 'Cyprus'), (b'CZ', 'Czech Republic'), (b'DK', 'Denmark'), (b'DJ', 'Djibouti'), (b'DM', 'Dominica'), (b'DO', 'Dominican Republic'), (b'EC', 'Ecuador'), (b'EG', 'Egypt'), (b'SV', 'El Salvador'), (b'GQ', 'Equatorial Guinea'), (b'ER', 'Eritrea'), (b'EE', 'Estonia'), (b'ET', 'Ethiopia'), (b'FK', 'Falkland Islands (Malvinas)'), (b'FO', 'Faroe Islands'), (b'FJ', 'Fiji'), (b'FI', 'Finland'), (b'FR', 'France'), (b'GF', 'French Guiana'), (b'PF', 'French Polynesia'), (b'TF', 'French Southern Territories'), (b'GA', 'Gabon'), (b'GM', 'Gambia'), (b'GE', 'Georgia'), (b'DE', 'Germany'), (b'GH', 'Ghana'), (b'GI', 'Gibraltar'), (b'GR', 'Greece'), (b'GL', 'Greenland'), (b'GD', 'Grenada'), (b'GP', 'Guadeloupe'), (b'GU', 'Guam'), (b'GT', 'Guatemala'), (b'GG', 'Guernsey'), (b'GN', 'Guinea'), (b'GW', 'Guinea-Bissau'), (b'GY', 'Guyana'), (b'HT', 'Haiti'), (b'HM', 'Heard Island and McDonald Islands'), (b'VA', 'Holy See (Vatican City State)'), (b'HN', 'Honduras'), (b'HK', 'Hong Kong'), (b'HU', 'Hungary'), (b'IS', 'Iceland'), (b'IN', 'India'), (b'ID', 'Indonesia'), (b'IR', 'Iran, Islamic Republic of'), (b'IQ', 'Iraq'), (b'IE', 'Ireland'), (b'IM', 'Isle of Man'), (b'IL', 'Israel'), (b'IT', 'Italy'), (b'JM', 'Jamaica'), (b'JP', 'Japan'), (b'JE', 'Jersey'), (b'JO', 'Jordan'), (b'KZ', 'Kazakhstan'), (b'KE', 'Kenya'), (b'KI', 'Kiribati'), (b'KP', "Korea, Democratic People's Republic of"), (b'KR', 'Korea, Republic of'), (b'KW', 'Kuwait'), (b'KG', 'Kyrgyzstan'), (b'LA', "Lao People's Democratic Republic"), (b'LV', 'Latvia'), (b'LB', 'Lebanon'), (b'LS', 'Lesotho'), (b'LR', 'Liberia'), (b'LY', 'Libyan Arab Jamahiriya'), (b'LI', 'Liechtenstein'), (b'LT', 'Lithuania'), (b'LU', 'Luxembourg'), (b'MO', 'Macao'), (b'MK', 'Macedonia, The Former Yugoslav Republic of'), (b'MG', 'Madagascar'), (b'MW', 'Malawi'), (b'MY', 'Malaysia'), (b'MV', 'Maldives'), (b'ML', 'Mali'), (b'MT', 'Malta'), (b'MH', 'Marshall Islands'), (b'MQ', 'Martinique'), (b'MR', 'Mauritania'), (b'MU', 'Mauritius'), (b'YT', 'Mayotte'), (b'MX', 'Mexico'), (b'FM', 'Micronesia, Federated States of'), (b'MD', 'Moldova'), (b'MC', 'Monaco'), (b'MN', 'Mongolia'), (b'ME', 'Montenegro'), (b'MS', 'Montserrat'), (b'MA', 'Morocco'), (b'MZ', 'Mozambique'), (b'MM', 'Myanmar'), (b'NA', 'Namibia'), (b'NR', 'Nauru'), (b'NP', 'Nepal'), (b'NL', 'Netherlands'), (b'AN', 'Netherlands Antilles'), (b'NC', 'New Caledonia'), (b'NZ', 'New Zealand'), (b'NI', 'Nicaragua'), (b'NE', 'Niger'), (b'NG', 'Nigeria'), (b'NU', 'Niue'), (b'NF', 'Norfolk Island'), (b'MP', 'Northern Mariana Islands'), (b'NO', 'Norway'), (b'OM', 'Oman'), (b'PK', 'Pakistan'), (b'PW', 'Palau'), (b'PS', 'Palestinian Territory, Occupied'), (b'PA', 'Panama'), (b'PG', 'Papua New Guinea'), (b'PY', 'Paraguay'), (b'PE', 'Peru'), (b'PH', 'Philippines'), (b'PN', 'Pitcairn'), (b'PL', 'Poland'), (b'PT', 'Portugal'), (b'PR', 'Puerto Rico'), (b'QA', 'Qatar'), (b'RE', 'Reunion'), (b'RO', 'Romania'), (b'RU', 'Russian Federation'), (b'RW', 'Rwanda'), (b'BL', 'Saint Barthelemy'), (b'SH', 'Saint Helena'), (b'KN', 'Saint Kitts and Nevis'), (b'LC', 'Saint Lucia'), (b'MF', 'Saint Martin'), (b'PM', 'Saint Pierre and Miquelon'), (b'VC', 'Saint Vincent and the Grenadines'), (b'WS', 'Samoa'), (b'SM', 'San Marino'), (b'ST', 'Sao Tome and Principe'), (b'SA', 'Saudi Arabia'), (b'SN', 'Senegal'), (b'RS', 'Serbia'), (b'SC', 'Seychelles'), (b'SL', 'Sierra Leone'), (b'SG', 'Singapore'), (b'SK', 'Slovakia'), (b'SI', 'Slovenia'), (b'SB', 'Solomon Islands'), (b'SO', 'Somalia'), (b'ZA', 'South Africa'), (b'GS', 'South Georgia and the South Sandwich Islands'), (b'ES', 'Spain'), (b'LK', 'Sri Lanka'), (b'SD', 'Sudan'), (b'SR', 'Suriname'), (b'SJ', 'Svalbard and Jan Mayen'), (b'SZ', 'Swaziland'), (b'SE', 'Sweden'), (b'CH', 'Switzerland'), (b'SY', 'Syrian Arab Republic'), (b'TW', 'Taiwan, Province of China'), (b'TJ', 'Tajikistan'), (b'TZ', 'Tanzania, United Republic of'), (b'TH', 'Thailand'), (b'TL', 'Timor-Leste'), (b'TG', 'Togo'), (b'TK', 'Tokelau'), (b'TO', 'Tonga'), (b'TT', 'Trinidad and Tobago'), (b'TN', 'Tunisia'), (b'TR', 'Turkey'), (b'TM', 'Turkmenistan'), (b'TC', 'Turks and Caicos Islands'), (b'TV', 'Tuvalu'), (b'UG', 'Uganda'), (b'UA', 'Ukraine'), (b'AE', 'United Arab Emirates'), (b'US', 'United States'), (b'UM', 'United States Minor Outlying Islands'), (b'UY', 'Uruguay'), (b'UZ', 'Uzbekistan'), (b'VU', 'Vanuatu'), (b'VE', 'Venezuela'), (b'VN', 'Viet Nam'), (b'VG', 'Virgin Islands, British'), (b'VI', 'Virgin Islands, U.S.'), (b'WF', 'Wallis and Futuna'), (b'EH', 'Western Sahara'), (b'YE', 'Yemen'), (b'ZM', 'Zambia'), (b'ZW', 'Zimbabwe')])),
                ('state', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('alternate_names', huts.model_fields.ListField(null=True, blank=True)),
                ('hut_url', models.URLField(max_length=250, blank=True)),
                ('hut_references', huts.model_fields.ListField(null=True, blank=True)),
                ('photo', any_imagefield.models.fields.AnyImageField(null=True, upload_to=huts.models.image_path, blank=True)),
                ('photo_url', models.URLField(max_length=250, null=True, blank=True)),
                ('photo_credit_name', models.CharField(max_length=150, blank=True)),
                ('photo_credit_url', models.URLField(max_length=250, null=True, blank=True)),
                ('backcountry', models.IntegerField(blank=True, null=True, choices=[(0, b'frontcountry'), (1, b'backcountry in snow'), (2, b'backcountry year-round'), (3, b'backcountry year-round and accessible only by trail or rugged terrain')])),
                ('open_summer', models.NullBooleanField()),
                ('open_winter', models.NullBooleanField()),
                ('no_snow_min_km', models.FloatField(null=True, verbose_name=b'minimum non-motorized kilometers when no snow is present', blank=True)),
                ('is_snow_min_km', models.NullBooleanField(verbose_name=b'is there ever snow on access roads?')),
                ('snow_min_km', models.FloatField(null=True, verbose_name=b'non-motorized kilometers to nearest trailhead on plowed road', blank=True)),
                ('structures', models.IntegerField(null=True, verbose_name=b'number of structures', blank=True)),
                ('overnight', models.NullBooleanField(verbose_name=b'available for overnight stays')),
                ('capacity_max', models.IntegerField(null=True, verbose_name=b'total capacity', blank=True)),
                ('capacity_hut_min', models.IntegerField(null=True, verbose_name=b'minimum hut capacity', blank=True)),
                ('capacity_hut_max', models.IntegerField(null=True, verbose_name=b'maximum hut capacity', blank=True)),
                ('is_fee_person', models.NullBooleanField(verbose_name=b'can you pay per person?')),
                ('fee_person_min', models.FloatField(null=True, verbose_name=b'minimum fee per person per night', blank=True)),
                ('fee_person_max', models.FloatField(null=True, verbose_name=b'maximum fee per person per night', blank=True)),
                ('is_fee_person_occupancy_min', models.NullBooleanField(verbose_name=b'is there a minimum occupancy when paying per person?')),
                ('fee_person_occupancy_min', models.IntegerField(null=True, verbose_name=b'minimum occupancy when paying per person', blank=True)),
                ('is_fee_hut', models.NullBooleanField(verbose_name=b'can you pay per structure?')),
                ('fee_hut_min', models.FloatField(null=True, verbose_name=b'minimum fee per structure per night', blank=True)),
                ('fee_hut_max', models.FloatField(null=True, verbose_name=b'maximum fee per structure per night', blank=True)),
                ('is_fee_hut_occupancy_max', models.NullBooleanField(verbose_name=b'is there a maximum occupancy when paying per structure?')),
                ('fee_hut_occupancy_max', models.IntegerField(null=True, verbose_name=b'maximum occupancy when paying per structure', blank=True)),
                ('has_services', models.NullBooleanField(verbose_name=b'are services included?')),
                ('has_optional_services', models.NullBooleanField(verbose_name=b'optional services are available at further cost')),
                ('is_restricted', models.NullBooleanField(verbose_name=b'is access restricted?')),
                ('restriction', models.CharField(max_length=100, blank=True)),
                ('reservations', models.NullBooleanField(verbose_name=b'reservations accepted')),
                ('locked', models.NullBooleanField()),
                ('private', models.NullBooleanField()),
                ('discretion', models.NullBooleanField()),
                ('published', models.BooleanField()),
                ('access_no_snow', models.ManyToManyField(to='huts.AccessType', blank=True)),
                ('agency', models.ForeignKey(blank=True, to='huts.Agency', null=True)),
                ('designations', models.ManyToManyField(to='huts.Designation', blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HutEdit',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateField(auto_now_add=True)),
                ('updated', models.DateField(auto_now=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('altitude_meters', models.IntegerField(null=True, verbose_name=b'altitude (m)', blank=True)),
                ('location_accuracy', models.IntegerField(blank=True, null=True, choices=[(None, b'Provided by 3rd party'), (1, b'Wild guess (> 1 km)'), (2, b'Guess (< 1 km)'), (3, b'Found on photo or topo map'), (4, b'Surveyed by GPS'), (5, b'Surveyed by GPS and found on map')])),
                ('show_satellite', models.NullBooleanField()),
                ('show_topo', models.NullBooleanField()),
                ('location_references', huts.model_fields.ListField(null=True, blank=True)),
                ('country', huts.model_fields.CountryField(max_length=2, choices=[(b'GB', 'United Kingdom'), (b'AF', 'Afghanistan'), (b'AX', 'Aland Islands'), (b'AL', 'Albania'), (b'DZ', 'Algeria'), (b'AS', 'American Samoa'), (b'AD', 'Andorra'), (b'AO', 'Angola'), (b'AI', 'Anguilla'), (b'AQ', 'Antarctica'), (b'AG', 'Antigua and Barbuda'), (b'AR', 'Argentina'), (b'AM', 'Armenia'), (b'AW', 'Aruba'), (b'AU', 'Australia'), (b'AT', 'Austria'), (b'AZ', 'Azerbaijan'), (b'BS', 'Bahamas'), (b'BH', 'Bahrain'), (b'BD', 'Bangladesh'), (b'BB', 'Barbados'), (b'BY', 'Belarus'), (b'BE', 'Belgium'), (b'BZ', 'Belize'), (b'BJ', 'Benin'), (b'BM', 'Bermuda'), (b'BT', 'Bhutan'), (b'BO', 'Bolivia'), (b'BA', 'Bosnia and Herzegovina'), (b'BW', 'Botswana'), (b'BV', 'Bouvet Island'), (b'BR', 'Brazil'), (b'IO', 'British Indian Ocean Territory'), (b'BN', 'Brunei Darussalam'), (b'BG', 'Bulgaria'), (b'BF', 'Burkina Faso'), (b'BI', 'Burundi'), (b'KH', 'Cambodia'), (b'CM', 'Cameroon'), (b'CA', 'Canada'), (b'CV', 'Cape Verde'), (b'KY', 'Cayman Islands'), (b'CF', 'Central African Republic'), (b'TD', 'Chad'), (b'CL', 'Chile'), (b'CN', 'China'), (b'CX', 'Christmas Island'), (b'CC', 'Cocos (Keeling) Islands'), (b'CO', 'Colombia'), (b'KM', 'Comoros'), (b'CG', 'Congo'), (b'CD', 'Congo, The Democratic Republic of the'), (b'CK', 'Cook Islands'), (b'CR', 'Costa Rica'), (b'CI', "Cote d'Ivoire"), (b'HR', 'Croatia'), (b'CU', 'Cuba'), (b'CY', 'Cyprus'), (b'CZ', 'Czech Republic'), (b'DK', 'Denmark'), (b'DJ', 'Djibouti'), (b'DM', 'Dominica'), (b'DO', 'Dominican Republic'), (b'EC', 'Ecuador'), (b'EG', 'Egypt'), (b'SV', 'El Salvador'), (b'GQ', 'Equatorial Guinea'), (b'ER', 'Eritrea'), (b'EE', 'Estonia'), (b'ET', 'Ethiopia'), (b'FK', 'Falkland Islands (Malvinas)'), (b'FO', 'Faroe Islands'), (b'FJ', 'Fiji'), (b'FI', 'Finland'), (b'FR', 'France'), (b'GF', 'French Guiana'), (b'PF', 'French Polynesia'), (b'TF', 'French Southern Territories'), (b'GA', 'Gabon'), (b'GM', 'Gambia'), (b'GE', 'Georgia'), (b'DE', 'Germany'), (b'GH', 'Ghana'), (b'GI', 'Gibraltar'), (b'GR', 'Greece'), (b'GL', 'Greenland'), (b'GD', 'Grenada'), (b'GP', 'Guadeloupe'), (b'GU', 'Guam'), (b'GT', 'Guatemala'), (b'GG', 'Guernsey'), (b'GN', 'Guinea'), (b'GW', 'Guinea-Bissau'), (b'GY', 'Guyana'), (b'HT', 'Haiti'), (b'HM', 'Heard Island and McDonald Islands'), (b'VA', 'Holy See (Vatican City State)'), (b'HN', 'Honduras'), (b'HK', 'Hong Kong'), (b'HU', 'Hungary'), (b'IS', 'Iceland'), (b'IN', 'India'), (b'ID', 'Indonesia'), (b'IR', 'Iran, Islamic Republic of'), (b'IQ', 'Iraq'), (b'IE', 'Ireland'), (b'IM', 'Isle of Man'), (b'IL', 'Israel'), (b'IT', 'Italy'), (b'JM', 'Jamaica'), (b'JP', 'Japan'), (b'JE', 'Jersey'), (b'JO', 'Jordan'), (b'KZ', 'Kazakhstan'), (b'KE', 'Kenya'), (b'KI', 'Kiribati'), (b'KP', "Korea, Democratic People's Republic of"), (b'KR', 'Korea, Republic of'), (b'KW', 'Kuwait'), (b'KG', 'Kyrgyzstan'), (b'LA', "Lao People's Democratic Republic"), (b'LV', 'Latvia'), (b'LB', 'Lebanon'), (b'LS', 'Lesotho'), (b'LR', 'Liberia'), (b'LY', 'Libyan Arab Jamahiriya'), (b'LI', 'Liechtenstein'), (b'LT', 'Lithuania'), (b'LU', 'Luxembourg'), (b'MO', 'Macao'), (b'MK', 'Macedonia, The Former Yugoslav Republic of'), (b'MG', 'Madagascar'), (b'MW', 'Malawi'), (b'MY', 'Malaysia'), (b'MV', 'Maldives'), (b'ML', 'Mali'), (b'MT', 'Malta'), (b'MH', 'Marshall Islands'), (b'MQ', 'Martinique'), (b'MR', 'Mauritania'), (b'MU', 'Mauritius'), (b'YT', 'Mayotte'), (b'MX', 'Mexico'), (b'FM', 'Micronesia, Federated States of'), (b'MD', 'Moldova'), (b'MC', 'Monaco'), (b'MN', 'Mongolia'), (b'ME', 'Montenegro'), (b'MS', 'Montserrat'), (b'MA', 'Morocco'), (b'MZ', 'Mozambique'), (b'MM', 'Myanmar'), (b'NA', 'Namibia'), (b'NR', 'Nauru'), (b'NP', 'Nepal'), (b'NL', 'Netherlands'), (b'AN', 'Netherlands Antilles'), (b'NC', 'New Caledonia'), (b'NZ', 'New Zealand'), (b'NI', 'Nicaragua'), (b'NE', 'Niger'), (b'NG', 'Nigeria'), (b'NU', 'Niue'), (b'NF', 'Norfolk Island'), (b'MP', 'Northern Mariana Islands'), (b'NO', 'Norway'), (b'OM', 'Oman'), (b'PK', 'Pakistan'), (b'PW', 'Palau'), (b'PS', 'Palestinian Territory, Occupied'), (b'PA', 'Panama'), (b'PG', 'Papua New Guinea'), (b'PY', 'Paraguay'), (b'PE', 'Peru'), (b'PH', 'Philippines'), (b'PN', 'Pitcairn'), (b'PL', 'Poland'), (b'PT', 'Portugal'), (b'PR', 'Puerto Rico'), (b'QA', 'Qatar'), (b'RE', 'Reunion'), (b'RO', 'Romania'), (b'RU', 'Russian Federation'), (b'RW', 'Rwanda'), (b'BL', 'Saint Barthelemy'), (b'SH', 'Saint Helena'), (b'KN', 'Saint Kitts and Nevis'), (b'LC', 'Saint Lucia'), (b'MF', 'Saint Martin'), (b'PM', 'Saint Pierre and Miquelon'), (b'VC', 'Saint Vincent and the Grenadines'), (b'WS', 'Samoa'), (b'SM', 'San Marino'), (b'ST', 'Sao Tome and Principe'), (b'SA', 'Saudi Arabia'), (b'SN', 'Senegal'), (b'RS', 'Serbia'), (b'SC', 'Seychelles'), (b'SL', 'Sierra Leone'), (b'SG', 'Singapore'), (b'SK', 'Slovakia'), (b'SI', 'Slovenia'), (b'SB', 'Solomon Islands'), (b'SO', 'Somalia'), (b'ZA', 'South Africa'), (b'GS', 'South Georgia and the South Sandwich Islands'), (b'ES', 'Spain'), (b'LK', 'Sri Lanka'), (b'SD', 'Sudan'), (b'SR', 'Suriname'), (b'SJ', 'Svalbard and Jan Mayen'), (b'SZ', 'Swaziland'), (b'SE', 'Sweden'), (b'CH', 'Switzerland'), (b'SY', 'Syrian Arab Republic'), (b'TW', 'Taiwan, Province of China'), (b'TJ', 'Tajikistan'), (b'TZ', 'Tanzania, United Republic of'), (b'TH', 'Thailand'), (b'TL', 'Timor-Leste'), (b'TG', 'Togo'), (b'TK', 'Tokelau'), (b'TO', 'Tonga'), (b'TT', 'Trinidad and Tobago'), (b'TN', 'Tunisia'), (b'TR', 'Turkey'), (b'TM', 'Turkmenistan'), (b'TC', 'Turks and Caicos Islands'), (b'TV', 'Tuvalu'), (b'UG', 'Uganda'), (b'UA', 'Ukraine'), (b'AE', 'United Arab Emirates'), (b'US', 'United States'), (b'UM', 'United States Minor Outlying Islands'), (b'UY', 'Uruguay'), (b'UZ', 'Uzbekistan'), (b'VU', 'Vanuatu'), (b'VE', 'Venezuela'), (b'VN', 'Viet Nam'), (b'VG', 'Virgin Islands, British'), (b'VI', 'Virgin Islands, U.S.'), (b'WF', 'Wallis and Futuna'), (b'EH', 'Western Sahara'), (b'YE', 'Yemen'), (b'ZM', 'Zambia'), (b'ZW', 'Zimbabwe')])),
                ('state', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('alternate_names', huts.model_fields.ListField(null=True, blank=True)),
                ('hut_url', models.URLField(max_length=250, blank=True)),
                ('hut_references', huts.model_fields.ListField(null=True, blank=True)),
                ('photo', any_imagefield.models.fields.AnyImageField(null=True, upload_to=huts.models.image_path, blank=True)),
                ('photo_url', models.URLField(max_length=250, null=True, blank=True)),
                ('photo_credit_name', models.CharField(max_length=150, blank=True)),
                ('photo_credit_url', models.URLField(max_length=250, null=True, blank=True)),
                ('backcountry', models.IntegerField(blank=True, null=True, choices=[(0, b'frontcountry'), (1, b'backcountry in snow'), (2, b'backcountry year-round'), (3, b'backcountry year-round and accessible only by trail or rugged terrain')])),
                ('open_summer', models.NullBooleanField()),
                ('open_winter', models.NullBooleanField()),
                ('no_snow_min_km', models.FloatField(null=True, verbose_name=b'minimum non-motorized kilometers when no snow is present', blank=True)),
                ('is_snow_min_km', models.NullBooleanField(verbose_name=b'is there ever snow on access roads?')),
                ('snow_min_km', models.FloatField(null=True, verbose_name=b'non-motorized kilometers to nearest trailhead on plowed road', blank=True)),
                ('structures', models.IntegerField(null=True, verbose_name=b'number of structures', blank=True)),
                ('overnight', models.NullBooleanField(verbose_name=b'available for overnight stays')),
                ('capacity_max', models.IntegerField(null=True, verbose_name=b'total capacity', blank=True)),
                ('capacity_hut_min', models.IntegerField(null=True, verbose_name=b'minimum hut capacity', blank=True)),
                ('capacity_hut_max', models.IntegerField(null=True, verbose_name=b'maximum hut capacity', blank=True)),
                ('is_fee_person', models.NullBooleanField(verbose_name=b'can you pay per person?')),
                ('fee_person_min', models.FloatField(null=True, verbose_name=b'minimum fee per person per night', blank=True)),
                ('fee_person_max', models.FloatField(null=True, verbose_name=b'maximum fee per person per night', blank=True)),
                ('is_fee_person_occupancy_min', models.NullBooleanField(verbose_name=b'is there a minimum occupancy when paying per person?')),
                ('fee_person_occupancy_min', models.IntegerField(null=True, verbose_name=b'minimum occupancy when paying per person', blank=True)),
                ('is_fee_hut', models.NullBooleanField(verbose_name=b'can you pay per structure?')),
                ('fee_hut_min', models.FloatField(null=True, verbose_name=b'minimum fee per structure per night', blank=True)),
                ('fee_hut_max', models.FloatField(null=True, verbose_name=b'maximum fee per structure per night', blank=True)),
                ('is_fee_hut_occupancy_max', models.NullBooleanField(verbose_name=b'is there a maximum occupancy when paying per structure?')),
                ('fee_hut_occupancy_max', models.IntegerField(null=True, verbose_name=b'maximum occupancy when paying per structure', blank=True)),
                ('has_services', models.NullBooleanField(verbose_name=b'are services included?')),
                ('has_optional_services', models.NullBooleanField(verbose_name=b'optional services are available at further cost')),
                ('is_restricted', models.NullBooleanField(verbose_name=b'is access restricted?')),
                ('restriction', models.CharField(max_length=100, blank=True)),
                ('reservations', models.NullBooleanField(verbose_name=b'reservations accepted')),
                ('locked', models.NullBooleanField()),
                ('private', models.NullBooleanField()),
                ('discretion', models.NullBooleanField()),
                ('user_email', models.EmailField(max_length=254, verbose_name=b'your email', blank=True)),
                ('user_notes', models.TextField(verbose_name=b'notes for the Hutmap team', blank=True)),
                ('access_no_snow', models.ManyToManyField(to='huts.AccessType', blank=True)),
                ('agency', models.ForeignKey(blank=True, to='huts.Agency', null=True)),
                ('designations', models.ManyToManyField(to='huts.Designation', blank=True)),
                ('hut', models.ForeignKey(related_name='+', to='huts.Hut')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HutSuggestion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateField(auto_now_add=True)),
                ('updated', models.DateField(auto_now=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('altitude_meters', models.IntegerField(null=True, verbose_name=b'altitude (m)', blank=True)),
                ('location_accuracy', models.IntegerField(blank=True, null=True, choices=[(None, b'Provided by 3rd party'), (1, b'Wild guess (> 1 km)'), (2, b'Guess (< 1 km)'), (3, b'Found on photo or topo map'), (4, b'Surveyed by GPS'), (5, b'Surveyed by GPS and found on map')])),
                ('show_satellite', models.NullBooleanField()),
                ('show_topo', models.NullBooleanField()),
                ('location_references', huts.model_fields.ListField(null=True, blank=True)),
                ('country', huts.model_fields.CountryField(max_length=2, choices=[(b'GB', 'United Kingdom'), (b'AF', 'Afghanistan'), (b'AX', 'Aland Islands'), (b'AL', 'Albania'), (b'DZ', 'Algeria'), (b'AS', 'American Samoa'), (b'AD', 'Andorra'), (b'AO', 'Angola'), (b'AI', 'Anguilla'), (b'AQ', 'Antarctica'), (b'AG', 'Antigua and Barbuda'), (b'AR', 'Argentina'), (b'AM', 'Armenia'), (b'AW', 'Aruba'), (b'AU', 'Australia'), (b'AT', 'Austria'), (b'AZ', 'Azerbaijan'), (b'BS', 'Bahamas'), (b'BH', 'Bahrain'), (b'BD', 'Bangladesh'), (b'BB', 'Barbados'), (b'BY', 'Belarus'), (b'BE', 'Belgium'), (b'BZ', 'Belize'), (b'BJ', 'Benin'), (b'BM', 'Bermuda'), (b'BT', 'Bhutan'), (b'BO', 'Bolivia'), (b'BA', 'Bosnia and Herzegovina'), (b'BW', 'Botswana'), (b'BV', 'Bouvet Island'), (b'BR', 'Brazil'), (b'IO', 'British Indian Ocean Territory'), (b'BN', 'Brunei Darussalam'), (b'BG', 'Bulgaria'), (b'BF', 'Burkina Faso'), (b'BI', 'Burundi'), (b'KH', 'Cambodia'), (b'CM', 'Cameroon'), (b'CA', 'Canada'), (b'CV', 'Cape Verde'), (b'KY', 'Cayman Islands'), (b'CF', 'Central African Republic'), (b'TD', 'Chad'), (b'CL', 'Chile'), (b'CN', 'China'), (b'CX', 'Christmas Island'), (b'CC', 'Cocos (Keeling) Islands'), (b'CO', 'Colombia'), (b'KM', 'Comoros'), (b'CG', 'Congo'), (b'CD', 'Congo, The Democratic Republic of the'), (b'CK', 'Cook Islands'), (b'CR', 'Costa Rica'), (b'CI', "Cote d'Ivoire"), (b'HR', 'Croatia'), (b'CU', 'Cuba'), (b'CY', 'Cyprus'), (b'CZ', 'Czech Republic'), (b'DK', 'Denmark'), (b'DJ', 'Djibouti'), (b'DM', 'Dominica'), (b'DO', 'Dominican Republic'), (b'EC', 'Ecuador'), (b'EG', 'Egypt'), (b'SV', 'El Salvador'), (b'GQ', 'Equatorial Guinea'), (b'ER', 'Eritrea'), (b'EE', 'Estonia'), (b'ET', 'Ethiopia'), (b'FK', 'Falkland Islands (Malvinas)'), (b'FO', 'Faroe Islands'), (b'FJ', 'Fiji'), (b'FI', 'Finland'), (b'FR', 'France'), (b'GF', 'French Guiana'), (b'PF', 'French Polynesia'), (b'TF', 'French Southern Territories'), (b'GA', 'Gabon'), (b'GM', 'Gambia'), (b'GE', 'Georgia'), (b'DE', 'Germany'), (b'GH', 'Ghana'), (b'GI', 'Gibraltar'), (b'GR', 'Greece'), (b'GL', 'Greenland'), (b'GD', 'Grenada'), (b'GP', 'Guadeloupe'), (b'GU', 'Guam'), (b'GT', 'Guatemala'), (b'GG', 'Guernsey'), (b'GN', 'Guinea'), (b'GW', 'Guinea-Bissau'), (b'GY', 'Guyana'), (b'HT', 'Haiti'), (b'HM', 'Heard Island and McDonald Islands'), (b'VA', 'Holy See (Vatican City State)'), (b'HN', 'Honduras'), (b'HK', 'Hong Kong'), (b'HU', 'Hungary'), (b'IS', 'Iceland'), (b'IN', 'India'), (b'ID', 'Indonesia'), (b'IR', 'Iran, Islamic Republic of'), (b'IQ', 'Iraq'), (b'IE', 'Ireland'), (b'IM', 'Isle of Man'), (b'IL', 'Israel'), (b'IT', 'Italy'), (b'JM', 'Jamaica'), (b'JP', 'Japan'), (b'JE', 'Jersey'), (b'JO', 'Jordan'), (b'KZ', 'Kazakhstan'), (b'KE', 'Kenya'), (b'KI', 'Kiribati'), (b'KP', "Korea, Democratic People's Republic of"), (b'KR', 'Korea, Republic of'), (b'KW', 'Kuwait'), (b'KG', 'Kyrgyzstan'), (b'LA', "Lao People's Democratic Republic"), (b'LV', 'Latvia'), (b'LB', 'Lebanon'), (b'LS', 'Lesotho'), (b'LR', 'Liberia'), (b'LY', 'Libyan Arab Jamahiriya'), (b'LI', 'Liechtenstein'), (b'LT', 'Lithuania'), (b'LU', 'Luxembourg'), (b'MO', 'Macao'), (b'MK', 'Macedonia, The Former Yugoslav Republic of'), (b'MG', 'Madagascar'), (b'MW', 'Malawi'), (b'MY', 'Malaysia'), (b'MV', 'Maldives'), (b'ML', 'Mali'), (b'MT', 'Malta'), (b'MH', 'Marshall Islands'), (b'MQ', 'Martinique'), (b'MR', 'Mauritania'), (b'MU', 'Mauritius'), (b'YT', 'Mayotte'), (b'MX', 'Mexico'), (b'FM', 'Micronesia, Federated States of'), (b'MD', 'Moldova'), (b'MC', 'Monaco'), (b'MN', 'Mongolia'), (b'ME', 'Montenegro'), (b'MS', 'Montserrat'), (b'MA', 'Morocco'), (b'MZ', 'Mozambique'), (b'MM', 'Myanmar'), (b'NA', 'Namibia'), (b'NR', 'Nauru'), (b'NP', 'Nepal'), (b'NL', 'Netherlands'), (b'AN', 'Netherlands Antilles'), (b'NC', 'New Caledonia'), (b'NZ', 'New Zealand'), (b'NI', 'Nicaragua'), (b'NE', 'Niger'), (b'NG', 'Nigeria'), (b'NU', 'Niue'), (b'NF', 'Norfolk Island'), (b'MP', 'Northern Mariana Islands'), (b'NO', 'Norway'), (b'OM', 'Oman'), (b'PK', 'Pakistan'), (b'PW', 'Palau'), (b'PS', 'Palestinian Territory, Occupied'), (b'PA', 'Panama'), (b'PG', 'Papua New Guinea'), (b'PY', 'Paraguay'), (b'PE', 'Peru'), (b'PH', 'Philippines'), (b'PN', 'Pitcairn'), (b'PL', 'Poland'), (b'PT', 'Portugal'), (b'PR', 'Puerto Rico'), (b'QA', 'Qatar'), (b'RE', 'Reunion'), (b'RO', 'Romania'), (b'RU', 'Russian Federation'), (b'RW', 'Rwanda'), (b'BL', 'Saint Barthelemy'), (b'SH', 'Saint Helena'), (b'KN', 'Saint Kitts and Nevis'), (b'LC', 'Saint Lucia'), (b'MF', 'Saint Martin'), (b'PM', 'Saint Pierre and Miquelon'), (b'VC', 'Saint Vincent and the Grenadines'), (b'WS', 'Samoa'), (b'SM', 'San Marino'), (b'ST', 'Sao Tome and Principe'), (b'SA', 'Saudi Arabia'), (b'SN', 'Senegal'), (b'RS', 'Serbia'), (b'SC', 'Seychelles'), (b'SL', 'Sierra Leone'), (b'SG', 'Singapore'), (b'SK', 'Slovakia'), (b'SI', 'Slovenia'), (b'SB', 'Solomon Islands'), (b'SO', 'Somalia'), (b'ZA', 'South Africa'), (b'GS', 'South Georgia and the South Sandwich Islands'), (b'ES', 'Spain'), (b'LK', 'Sri Lanka'), (b'SD', 'Sudan'), (b'SR', 'Suriname'), (b'SJ', 'Svalbard and Jan Mayen'), (b'SZ', 'Swaziland'), (b'SE', 'Sweden'), (b'CH', 'Switzerland'), (b'SY', 'Syrian Arab Republic'), (b'TW', 'Taiwan, Province of China'), (b'TJ', 'Tajikistan'), (b'TZ', 'Tanzania, United Republic of'), (b'TH', 'Thailand'), (b'TL', 'Timor-Leste'), (b'TG', 'Togo'), (b'TK', 'Tokelau'), (b'TO', 'Tonga'), (b'TT', 'Trinidad and Tobago'), (b'TN', 'Tunisia'), (b'TR', 'Turkey'), (b'TM', 'Turkmenistan'), (b'TC', 'Turks and Caicos Islands'), (b'TV', 'Tuvalu'), (b'UG', 'Uganda'), (b'UA', 'Ukraine'), (b'AE', 'United Arab Emirates'), (b'US', 'United States'), (b'UM', 'United States Minor Outlying Islands'), (b'UY', 'Uruguay'), (b'UZ', 'Uzbekistan'), (b'VU', 'Vanuatu'), (b'VE', 'Venezuela'), (b'VN', 'Viet Nam'), (b'VG', 'Virgin Islands, British'), (b'VI', 'Virgin Islands, U.S.'), (b'WF', 'Wallis and Futuna'), (b'EH', 'Western Sahara'), (b'YE', 'Yemen'), (b'ZM', 'Zambia'), (b'ZW', 'Zimbabwe')])),
                ('state', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('alternate_names', huts.model_fields.ListField(null=True, blank=True)),
                ('hut_url', models.URLField(max_length=250, blank=True)),
                ('hut_references', huts.model_fields.ListField(null=True, blank=True)),
                ('photo', any_imagefield.models.fields.AnyImageField(null=True, upload_to=huts.models.image_path, blank=True)),
                ('photo_url', models.URLField(max_length=250, null=True, blank=True)),
                ('photo_credit_name', models.CharField(max_length=150, blank=True)),
                ('photo_credit_url', models.URLField(max_length=250, null=True, blank=True)),
                ('backcountry', models.IntegerField(blank=True, null=True, choices=[(0, b'frontcountry'), (1, b'backcountry in snow'), (2, b'backcountry year-round'), (3, b'backcountry year-round and accessible only by trail or rugged terrain')])),
                ('open_summer', models.NullBooleanField()),
                ('open_winter', models.NullBooleanField()),
                ('no_snow_min_km', models.FloatField(null=True, verbose_name=b'minimum non-motorized kilometers when no snow is present', blank=True)),
                ('is_snow_min_km', models.NullBooleanField(verbose_name=b'is there ever snow on access roads?')),
                ('snow_min_km', models.FloatField(null=True, verbose_name=b'non-motorized kilometers to nearest trailhead on plowed road', blank=True)),
                ('structures', models.IntegerField(null=True, verbose_name=b'number of structures', blank=True)),
                ('overnight', models.NullBooleanField(verbose_name=b'available for overnight stays')),
                ('capacity_max', models.IntegerField(null=True, verbose_name=b'total capacity', blank=True)),
                ('capacity_hut_min', models.IntegerField(null=True, verbose_name=b'minimum hut capacity', blank=True)),
                ('capacity_hut_max', models.IntegerField(null=True, verbose_name=b'maximum hut capacity', blank=True)),
                ('is_fee_person', models.NullBooleanField(verbose_name=b'can you pay per person?')),
                ('fee_person_min', models.FloatField(null=True, verbose_name=b'minimum fee per person per night', blank=True)),
                ('fee_person_max', models.FloatField(null=True, verbose_name=b'maximum fee per person per night', blank=True)),
                ('is_fee_person_occupancy_min', models.NullBooleanField(verbose_name=b'is there a minimum occupancy when paying per person?')),
                ('fee_person_occupancy_min', models.IntegerField(null=True, verbose_name=b'minimum occupancy when paying per person', blank=True)),
                ('is_fee_hut', models.NullBooleanField(verbose_name=b'can you pay per structure?')),
                ('fee_hut_min', models.FloatField(null=True, verbose_name=b'minimum fee per structure per night', blank=True)),
                ('fee_hut_max', models.FloatField(null=True, verbose_name=b'maximum fee per structure per night', blank=True)),
                ('is_fee_hut_occupancy_max', models.NullBooleanField(verbose_name=b'is there a maximum occupancy when paying per structure?')),
                ('fee_hut_occupancy_max', models.IntegerField(null=True, verbose_name=b'maximum occupancy when paying per structure', blank=True)),
                ('has_services', models.NullBooleanField(verbose_name=b'are services included?')),
                ('has_optional_services', models.NullBooleanField(verbose_name=b'optional services are available at further cost')),
                ('is_restricted', models.NullBooleanField(verbose_name=b'is access restricted?')),
                ('restriction', models.CharField(max_length=100, blank=True)),
                ('reservations', models.NullBooleanField(verbose_name=b'reservations accepted')),
                ('locked', models.NullBooleanField()),
                ('private', models.NullBooleanField()),
                ('discretion', models.NullBooleanField()),
                ('user_email', models.EmailField(max_length=254, verbose_name=b'your email', blank=True)),
                ('user_notes', models.TextField(verbose_name=b'notes for the Hutmap team', blank=True)),
                ('access_no_snow', models.ManyToManyField(to='huts.AccessType', blank=True)),
                ('agency', models.ForeignKey(blank=True, to='huts.Agency', null=True)),
                ('designations', models.ManyToManyField(to='huts.Designation', blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HutType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('identifier', models.SlugField(unique=True, validators=[django.core.validators.RegexValidator(b'^[-a-zA-Z0-9]+$', b'Must contain only letters, numbers, and dashes')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('region', models.CharField(unique=True, max_length=50)),
                ('created', models.DateField(auto_now_add=True)),
                ('updated', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('identifier', models.SlugField(unique=True, validators=[django.core.validators.RegexValidator(b'^[-a-zA-Z0-9]+$', b'Must contain only letters, numbers, and dashes')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('identifier', models.SlugField(unique=True, validators=[django.core.validators.RegexValidator(b'^[-a-zA-Z0-9]+$', b'Must contain only letters, numbers, and dashes')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='hutsuggestion',
            name='optional_services',
            field=models.ManyToManyField(related_name='optional_huts_hutsuggestion_set', to='huts.Service', blank=True),
        ),
        migrations.AddField(
            model_name='hutsuggestion',
            name='region',
            field=models.ForeignKey(blank=True, to='huts.Region', null=True),
        ),
        migrations.AddField(
            model_name='hutsuggestion',
            name='services',
            field=models.ManyToManyField(related_name='huts_hutsuggestion_set', to='huts.Service', blank=True),
        ),
        migrations.AddField(
            model_name='hutsuggestion',
            name='systems',
            field=models.ManyToManyField(to='huts.System', blank=True),
        ),
        migrations.AddField(
            model_name='hutsuggestion',
            name='types',
            field=models.ManyToManyField(to='huts.HutType'),
        ),
        migrations.AddField(
            model_name='hutedit',
            name='optional_services',
            field=models.ManyToManyField(related_name='optional_huts_hutedit_set', to='huts.Service', blank=True),
        ),
        migrations.AddField(
            model_name='hutedit',
            name='region',
            field=models.ForeignKey(blank=True, to='huts.Region', null=True),
        ),
        migrations.AddField(
            model_name='hutedit',
            name='services',
            field=models.ManyToManyField(related_name='huts_hutedit_set', to='huts.Service', blank=True),
        ),
        migrations.AddField(
            model_name='hutedit',
            name='systems',
            field=models.ManyToManyField(to='huts.System', blank=True),
        ),
        migrations.AddField(
            model_name='hutedit',
            name='types',
            field=models.ManyToManyField(to='huts.HutType'),
        ),
        migrations.AddField(
            model_name='hut',
            name='optional_services',
            field=models.ManyToManyField(related_name='optional_huts_hut_set', to='huts.Service', blank=True),
        ),
        migrations.AddField(
            model_name='hut',
            name='region',
            field=models.ForeignKey(blank=True, to='huts.Region', null=True),
        ),
        migrations.AddField(
            model_name='hut',
            name='services',
            field=models.ManyToManyField(related_name='huts_hut_set', to='huts.Service', blank=True),
        ),
        migrations.AddField(
            model_name='hut',
            name='systems',
            field=models.ManyToManyField(to='huts.System', blank=True),
        ),
        migrations.AddField(
            model_name='hut',
            name='types',
            field=models.ManyToManyField(to='huts.HutType'),
        ),
    ]
